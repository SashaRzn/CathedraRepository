#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.36213
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CathedraUniversity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertClassRoom(ClassRoom instance);
    partial void UpdateClassRoom(ClassRoom instance);
    partial void DeleteClassRoom(ClassRoom instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseInWork(CourseInWork instance);
    partial void UpdateCourseInWork(CourseInWork instance);
    partial void DeleteCourseInWork(CourseInWork instance);
    partial void InsertCourseType(CourseType instance);
    partial void UpdateCourseType(CourseType instance);
    partial void DeleteCourseType(CourseType instance);
    partial void InsertDiplomSettings(DiplomSettings instance);
    partial void UpdateDiplomSettings(DiplomSettings instance);
    partial void DeleteDiplomSettings(DiplomSettings instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupInCourse(GroupInCourse instance);
    partial void UpdateGroupInCourse(GroupInCourse instance);
    partial void DeleteGroupInCourse(GroupInCourse instance);
    partial void InsertGroupInSemestr(GroupInSemestr instance);
    partial void UpdateGroupInSemestr(GroupInSemestr instance);
    partial void DeleteGroupInSemestr(GroupInSemestr instance);
    partial void InsertLoadInCourseFact(LoadInCourseFact instance);
    partial void UpdateLoadInCourseFact(LoadInCourseFact instance);
    partial void DeleteLoadInCourseFact(LoadInCourseFact instance);
    partial void InsertLoadInCoursePlan(LoadInCoursePlan instance);
    partial void UpdateLoadInCoursePlan(LoadInCoursePlan instance);
    partial void DeleteLoadInCoursePlan(LoadInCoursePlan instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertPostAcessDenied(PostAcessDenied instance);
    partial void UpdatePostAcessDenied(PostAcessDenied instance);
    partial void DeletePostAcessDenied(PostAcessDenied instance);
    partial void InsertPostSalary(PostSalary instance);
    partial void UpdatePostSalary(PostSalary instance);
    partial void DeletePostSalary(PostSalary instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertSchoolYear(SchoolYear instance);
    partial void UpdateSchoolYear(SchoolYear instance);
    partial void DeleteSchoolYear(SchoolYear instance);
    partial void InsertSortLoad(SortLoad instance);
    partial void UpdateSortLoad(SortLoad instance);
    partial void DeleteSortLoad(SortLoad instance);
    partial void InsertSortLoadInCourseType(SortLoadInCourseType instance);
    partial void UpdateSortLoadInCourseType(SortLoadInCourseType instance);
    partial void DeleteSortLoadInCourseType(SortLoadInCourseType instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::CathedraUniversity.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ClassRoom> ClassRoom
		{
			get
			{
				return this.GetTable<ClassRoom>();
			}
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseInWork> CourseInWork
		{
			get
			{
				return this.GetTable<CourseInWork>();
			}
		}
		
		public System.Data.Linq.Table<CourseType> CourseType
		{
			get
			{
				return this.GetTable<CourseType>();
			}
		}
		
		public System.Data.Linq.Table<DiplomSettings> DiplomSettings
		{
			get
			{
				return this.GetTable<DiplomSettings>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupInCourse> GroupInCourse
		{
			get
			{
				return this.GetTable<GroupInCourse>();
			}
		}
		
		public System.Data.Linq.Table<GroupInSemestr> GroupInSemestr
		{
			get
			{
				return this.GetTable<GroupInSemestr>();
			}
		}
		
		public System.Data.Linq.Table<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this.GetTable<LoadInCourseFact>();
			}
		}
		
		public System.Data.Linq.Table<LoadInCoursePlan> LoadInCoursePlan
		{
			get
			{
				return this.GetTable<LoadInCoursePlan>();
			}
		}
		
		public System.Data.Linq.Table<Post> Post
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<PostAcessDenied> PostAcessDenied
		{
			get
			{
				return this.GetTable<PostAcessDenied>();
			}
		}
		
		public System.Data.Linq.Table<PostSalary> PostSalary
		{
			get
			{
				return this.GetTable<PostSalary>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rate
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<SchoolYear> SchoolYear
		{
			get
			{
				return this.GetTable<SchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<SortLoad> SortLoad
		{
			get
			{
				return this.GetTable<SortLoad>();
			}
		}
		
		public System.Data.Linq.Table<SortLoadInCourseType> SortLoadInCourseType
		{
			get
			{
				return this.GetTable<SortLoadInCourseType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassRoom")]
	public partial class ClassRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Number;
		
		private System.Nullable<byte> _Type;
		
		private System.Nullable<byte> _CountPlace;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnTypeChanging(System.Nullable<byte> value);
    partial void OnTypeChanged();
    partial void OnCountPlaceChanging(System.Nullable<byte> value);
    partial void OnCountPlaceChanged();
    #endregion
		
		public ClassRoom()
		{
			this._LoadInCourseFact = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt")]
		public System.Nullable<byte> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountPlace", DbType="TinyInt")]
		public System.Nullable<byte> CountPlace
		{
			get
			{
				return this._CountPlace;
			}
			set
			{
				if ((this._CountPlace != value))
				{
					this.OnCountPlaceChanging(value);
					this.SendPropertyChanging();
					this._CountPlace = value;
					this.SendPropertyChanged("CountPlace");
					this.OnCountPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassRoom_LoadInCourseFact", Storage="_LoadInCourseFact", ThisKey="Id", OtherKey="ClassRoomID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this._LoadInCourseFact;
			}
			set
			{
				this._LoadInCourseFact.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = this;
		}
		
		private void detach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Speciality;
		
		private string _Name;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _CourseTypeId;
		
		private EntitySet<CourseInWork> _CourseInWork;
		
		private EntitySet<DiplomSettings> _DiplomSettings;
		
		private EntitySet<DiplomSettings> _DiplomSettings1;
		
		private EntityRef<CourseType> _CourseType;
		
		private EntityRef<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnCourseTypeIdChanging(System.Nullable<int> value);
    partial void OnCourseTypeIdChanged();
    #endregion
		
		public Course()
		{
			this._CourseInWork = new EntitySet<CourseInWork>(new Action<CourseInWork>(this.attach_CourseInWork), new Action<CourseInWork>(this.detach_CourseInWork));
			this._DiplomSettings = new EntitySet<DiplomSettings>(new Action<DiplomSettings>(this.attach_DiplomSettings), new Action<DiplomSettings>(this.detach_DiplomSettings));
			this._DiplomSettings1 = new EntitySet<DiplomSettings>(new Action<DiplomSettings>(this.attach_DiplomSettings1), new Action<DiplomSettings>(this.detach_DiplomSettings1));
			this._CourseType = default(EntityRef<CourseType>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality", DbType="NVarChar(10)")]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTypeId", DbType="Int")]
		public System.Nullable<int> CourseTypeId
		{
			get
			{
				return this._CourseTypeId;
			}
			set
			{
				if ((this._CourseTypeId != value))
				{
					if (this._CourseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CourseTypeId = value;
					this.SendPropertyChanged("CourseTypeId");
					this.OnCourseTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInWork", Storage="_CourseInWork", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<CourseInWork> CourseInWork
		{
			get
			{
				return this._CourseInWork;
			}
			set
			{
				this._CourseInWork.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiplomSettings", Storage="_DiplomSettings", ThisKey="ID", OtherKey="DiplomCourseId")]
		public EntitySet<DiplomSettings> DiplomSettings
		{
			get
			{
				return this._DiplomSettings;
			}
			set
			{
				this._DiplomSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiplomSettings1", Storage="_DiplomSettings1", ThisKey="ID", OtherKey="ConsCourseId")]
		public EntitySet<DiplomSettings> DiplomSettings1
		{
			get
			{
				return this._DiplomSettings1;
			}
			set
			{
				this._DiplomSettings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_Course", Storage="_CourseType", ThisKey="CourseTypeId", OtherKey="Id", IsForeignKey=true)]
		public CourseType CourseType
		{
			get
			{
				return this._CourseType.Entity;
			}
			set
			{
				CourseType previousValue = this._CourseType.Entity;
				if (((previousValue != value) 
							|| (this._CourseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseType.Entity = null;
						previousValue.Course.Remove(this);
					}
					this._CourseType.Entity = value;
					if ((value != null))
					{
						value.Course.Add(this);
						this._CourseTypeId = value.Id;
					}
					else
					{
						this._CourseTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Course", Storage="_Employee", ThisKey="EmployeeID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Course.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Course.Add(this);
						this._EmployeeID = value.Id;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_DiplomSettings(DiplomSettings entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_DiplomSettings(DiplomSettings entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_DiplomSettings1(DiplomSettings entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_DiplomSettings1(DiplomSettings entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseInWork")]
	public partial class CourseInWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _CourseID;
		
		private System.Nullable<int> _SchoolYearID;
		
		private System.Nullable<short> _Semestr;
		
		private System.Nullable<int> _EmployeeID;
		
		private int _ID;
		
		private System.Nullable<bool> _FormStudy;
		
		private EntitySet<GroupInCourse> _GroupInCourse;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact;
		
		private EntitySet<LoadInCoursePlan> _LoadInCoursePlan;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(System.Nullable<int> value);
    partial void OnCourseIDChanged();
    partial void OnSchoolYearIDChanging(System.Nullable<int> value);
    partial void OnSchoolYearIDChanged();
    partial void OnSemestrChanging(System.Nullable<short> value);
    partial void OnSemestrChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFormStudyChanging(System.Nullable<bool> value);
    partial void OnFormStudyChanged();
    #endregion
		
		public CourseInWork()
		{
			this._GroupInCourse = new EntitySet<GroupInCourse>(new Action<GroupInCourse>(this.attach_GroupInCourse), new Action<GroupInCourse>(this.detach_GroupInCourse));
			this._LoadInCourseFact = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact));
			this._LoadInCoursePlan = new EntitySet<LoadInCoursePlan>(new Action<LoadInCoursePlan>(this.attach_LoadInCoursePlan), new Action<LoadInCoursePlan>(this.detach_LoadInCoursePlan));
			this._Course = default(EntityRef<Course>);
			this._Employee = default(EntityRef<Employee>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int")]
		public System.Nullable<int> CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int")]
		public System.Nullable<int> SchoolYearID
		{
			get
			{
				return this._SchoolYearID;
			}
			set
			{
				if ((this._SchoolYearID != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearID = value;
					this.SendPropertyChanged("SchoolYearID");
					this.OnSchoolYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semestr", DbType="SmallInt")]
		public System.Nullable<short> Semestr
		{
			get
			{
				return this._Semestr;
			}
			set
			{
				if ((this._Semestr != value))
				{
					this.OnSemestrChanging(value);
					this.SendPropertyChanging();
					this._Semestr = value;
					this.SendPropertyChanged("Semestr");
					this.OnSemestrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormStudy", DbType="Bit")]
		public System.Nullable<bool> FormStudy
		{
			get
			{
				return this._FormStudy;
			}
			set
			{
				if ((this._FormStudy != value))
				{
					this.OnFormStudyChanging(value);
					this.SendPropertyChanging();
					this._FormStudy = value;
					this.SendPropertyChanged("FormStudy");
					this.OnFormStudyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_GroupInCourse", Storage="_GroupInCourse", ThisKey="ID", OtherKey="CourseInWorkID")]
		public EntitySet<GroupInCourse> GroupInCourse
		{
			get
			{
				return this._GroupInCourse;
			}
			set
			{
				this._GroupInCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_LoadInCourseFact", Storage="_LoadInCourseFact", ThisKey="ID", OtherKey="CourseInWorkID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this._LoadInCourseFact;
			}
			set
			{
				this._LoadInCourseFact.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_LoadInCoursePlan", Storage="_LoadInCoursePlan", ThisKey="ID", OtherKey="CourseInWorkID")]
		public EntitySet<LoadInCoursePlan> LoadInCoursePlan
		{
			get
			{
				return this._LoadInCoursePlan;
			}
			set
			{
				this._LoadInCoursePlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInWork", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseInWork.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseInWork.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CourseInWork", Storage="_Employee", ThisKey="EmployeeID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CourseInWork.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CourseInWork.Add(this);
						this._EmployeeID = value.Id;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_CourseInWork", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="ID", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.CourseInWork.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.CourseInWork.Add(this);
						this._SchoolYearID = value.ID;
					}
					else
					{
						this._SchoolYearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupInCourse(GroupInCourse entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = this;
		}
		
		private void detach_GroupInCourse(GroupInCourse entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = null;
		}
		
		private void attach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = this;
		}
		
		private void detach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = null;
		}
		
		private void attach_LoadInCoursePlan(LoadInCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = this;
		}
		
		private void detach_LoadInCoursePlan(LoadInCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.CourseInWork = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseType")]
	public partial class CourseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Course> _Course;
		
		private EntitySet<SortLoadInCourseType> _SortLoadInCourseType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CourseType()
		{
			this._Course = new EntitySet<Course>(new Action<Course>(this.attach_Course), new Action<Course>(this.detach_Course));
			this._SortLoadInCourseType = new EntitySet<SortLoadInCourseType>(new Action<SortLoadInCourseType>(this.attach_SortLoadInCourseType), new Action<SortLoadInCourseType>(this.detach_SortLoadInCourseType));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_Course", Storage="_Course", ThisKey="Id", OtherKey="CourseTypeId")]
		public EntitySet<Course> Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				this._Course.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_SortLoadInCourseType", Storage="_SortLoadInCourseType", ThisKey="Id", OtherKey="CourseTypeID")]
		public EntitySet<SortLoadInCourseType> SortLoadInCourseType
		{
			get
			{
				return this._SortLoadInCourseType;
			}
			set
			{
				this._SortLoadInCourseType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = this;
		}
		
		private void detach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = null;
		}
		
		private void attach_SortLoadInCourseType(SortLoadInCourseType entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = this;
		}
		
		private void detach_SortLoadInCourseType(SortLoadInCourseType entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiplomSettings")]
	public partial class DiplomSettings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiplomCourseId;
		
		private string _CourseName;
		
		private int _ConsCourseId;
		
		private int _DiplomHoursPerStudent;
		
		private int _ConsHoursPerStudent;
		
		private int _Id;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiplomCourseIdChanging(int value);
    partial void OnDiplomCourseIdChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnConsCourseIdChanging(int value);
    partial void OnConsCourseIdChanged();
    partial void OnDiplomHoursPerStudentChanging(int value);
    partial void OnDiplomHoursPerStudentChanged();
    partial void OnConsHoursPerStudentChanging(int value);
    partial void OnConsHoursPerStudentChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public DiplomSettings()
		{
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiplomCourseId", DbType="Int NOT NULL")]
		public int DiplomCourseId
		{
			get
			{
				return this._DiplomCourseId;
			}
			set
			{
				if ((this._DiplomCourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiplomCourseIdChanging(value);
					this.SendPropertyChanging();
					this._DiplomCourseId = value;
					this.SendPropertyChanged("DiplomCourseId");
					this.OnDiplomCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsCourseId", DbType="Int NOT NULL")]
		public int ConsCourseId
		{
			get
			{
				return this._ConsCourseId;
			}
			set
			{
				if ((this._ConsCourseId != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsCourseIdChanging(value);
					this.SendPropertyChanging();
					this._ConsCourseId = value;
					this.SendPropertyChanged("ConsCourseId");
					this.OnConsCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiplomHoursPerStudent", DbType="Int NOT NULL")]
		public int DiplomHoursPerStudent
		{
			get
			{
				return this._DiplomHoursPerStudent;
			}
			set
			{
				if ((this._DiplomHoursPerStudent != value))
				{
					this.OnDiplomHoursPerStudentChanging(value);
					this.SendPropertyChanging();
					this._DiplomHoursPerStudent = value;
					this.SendPropertyChanged("DiplomHoursPerStudent");
					this.OnDiplomHoursPerStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsHoursPerStudent", DbType="Int NOT NULL")]
		public int ConsHoursPerStudent
		{
			get
			{
				return this._ConsHoursPerStudent;
			}
			set
			{
				if ((this._ConsHoursPerStudent != value))
				{
					this.OnConsHoursPerStudentChanging(value);
					this.SendPropertyChanging();
					this._ConsHoursPerStudent = value;
					this.SendPropertyChanged("ConsHoursPerStudent");
					this.OnConsHoursPerStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiplomSettings", Storage="_Course", ThisKey="DiplomCourseId", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.DiplomSettings.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.DiplomSettings.Add(this);
						this._DiplomCourseId = value.ID;
					}
					else
					{
						this._DiplomCourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiplomSettings1", Storage="_Course1", ThisKey="ConsCourseId", OtherKey="ID", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.DiplomSettings1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.DiplomSettings1.Add(this);
						this._ConsCourseId = value.ID;
					}
					else
					{
						this._ConsCourseId = default(int);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Fio;
		
		private int _Id;
		
		private string _Comment;
		
		private System.Nullable<int> _PostID;
		
		private bool _NonActive;
		
		private string _Phone;
		
		private string _E_mail;
		
		private EntitySet<Course> _Course;
		
		private EntitySet<CourseInWork> _CourseInWork;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact1;
		
		private EntitySet<Rate> _Rate;
		
		private EntityRef<Post> _Post;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFioChanging(string value);
    partial void OnFioChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPostIDChanging(System.Nullable<int> value);
    partial void OnPostIDChanged();
    partial void OnNonActiveChanging(bool value);
    partial void OnNonActiveChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    #endregion
		
		public Employee()
		{
			this._Course = new EntitySet<Course>(new Action<Course>(this.attach_Course), new Action<Course>(this.detach_Course));
			this._CourseInWork = new EntitySet<CourseInWork>(new Action<CourseInWork>(this.attach_CourseInWork), new Action<CourseInWork>(this.detach_CourseInWork));
			this._LoadInCourseFact = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact));
			this._LoadInCourseFact1 = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact1), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact1));
			this._Rate = new EntitySet<Rate>(new Action<Rate>(this.attach_Rate), new Action<Rate>(this.detach_Rate));
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fio", DbType="NVarChar(100)")]
		public string Fio
		{
			get
			{
				return this._Fio;
			}
			set
			{
				if ((this._Fio != value))
				{
					this.OnFioChanging(value);
					this.SendPropertyChanging();
					this._Fio = value;
					this.SendPropertyChanged("Fio");
					this.OnFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Int")]
		public System.Nullable<int> PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonActive", DbType="Bit NOT NULL")]
		public bool NonActive
		{
			get
			{
				return this._NonActive;
			}
			set
			{
				if ((this._NonActive != value))
				{
					this.OnNonActiveChanging(value);
					this.SendPropertyChanging();
					this._NonActive = value;
					this.SendPropertyChanged("NonActive");
					this.OnNonActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-mail]", Storage="_E_mail", DbType="NVarChar(100)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Course", Storage="_Course", ThisKey="Id", OtherKey="EmployeeID")]
		public EntitySet<Course> Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				this._Course.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CourseInWork", Storage="_CourseInWork", ThisKey="Id", OtherKey="EmployeeID")]
		public EntitySet<CourseInWork> CourseInWork
		{
			get
			{
				return this._CourseInWork;
			}
			set
			{
				this._CourseInWork.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoadInCourseFact", Storage="_LoadInCourseFact", ThisKey="Id", OtherKey="EmployeeFormID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this._LoadInCourseFact;
			}
			set
			{
				this._LoadInCourseFact.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoadInCourseFact1", Storage="_LoadInCourseFact1", ThisKey="Id", OtherKey="EmployeeFactID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact1
		{
			get
			{
				return this._LoadInCourseFact1;
			}
			set
			{
				this._LoadInCourseFact1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rate", Storage="_Rate", ThisKey="Id", OtherKey="EmployeeID")]
		public EntitySet<Rate> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				this._Rate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Employee", Storage="_Post", ThisKey="PostID", OtherKey="Id", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._PostID = value.Id;
					}
					else
					{
						this._PostID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_LoadInCourseFact1(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_LoadInCourseFact1(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Group1;
		
		private string _Speciality;
		
		private string _SpecialityName;
		
		private int _ID;
		
		private System.Nullable<bool> _IsOchniki;
		
		private EntitySet<GroupInSemestr> _GroupInSemestr;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroup1Changing(string value);
    partial void OnGroup1Changed();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    partial void OnSpecialityNameChanging(string value);
    partial void OnSpecialityNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsOchnikiChanging(System.Nullable<bool> value);
    partial void OnIsOchnikiChanged();
    #endregion
		
		public Group()
		{
			this._GroupInSemestr = new EntitySet<GroupInSemestr>(new Action<GroupInSemestr>(this.attach_GroupInSemestr), new Action<GroupInSemestr>(this.detach_GroupInSemestr));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group1", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string Group1
		{
			get
			{
				return this._Group1;
			}
			set
			{
				if ((this._Group1 != value))
				{
					this.OnGroup1Changing(value);
					this.SendPropertyChanging();
					this._Group1 = value;
					this.SendPropertyChanged("Group1");
					this.OnGroup1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality", DbType="NVarChar(10)")]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityName", DbType="NVarChar(100)")]
		public string SpecialityName
		{
			get
			{
				return this._SpecialityName;
			}
			set
			{
				if ((this._SpecialityName != value))
				{
					this.OnSpecialityNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialityName = value;
					this.SendPropertyChanged("SpecialityName");
					this.OnSpecialityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOchniki", DbType="Bit")]
		public System.Nullable<bool> IsOchniki
		{
			get
			{
				return this._IsOchniki;
			}
			set
			{
				if ((this._IsOchniki != value))
				{
					this.OnIsOchnikiChanging(value);
					this.SendPropertyChanging();
					this._IsOchniki = value;
					this.SendPropertyChanged("IsOchniki");
					this.OnIsOchnikiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupInSemestr", Storage="_GroupInSemestr", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<GroupInSemestr> GroupInSemestr
		{
			get
			{
				return this._GroupInSemestr;
			}
			set
			{
				this._GroupInSemestr.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupInSemestr(GroupInSemestr entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupInSemestr(GroupInSemestr entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupInCourse")]
	public partial class GroupInCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GroupInSemestrID;
		
		private System.Nullable<int> _CourseInWorkID;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact;
		
		private EntityRef<CourseInWork> _CourseInWork;
		
		private EntityRef<GroupInSemestr> _GroupInSemestr;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupInSemestrIDChanging(System.Nullable<int> value);
    partial void OnGroupInSemestrIDChanged();
    partial void OnCourseInWorkIDChanging(System.Nullable<int> value);
    partial void OnCourseInWorkIDChanged();
    #endregion
		
		public GroupInCourse()
		{
			this._LoadInCourseFact = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact));
			this._CourseInWork = default(EntityRef<CourseInWork>);
			this._GroupInSemestr = default(EntityRef<GroupInSemestr>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupInSemestrID", DbType="Int")]
		public System.Nullable<int> GroupInSemestrID
		{
			get
			{
				return this._GroupInSemestrID;
			}
			set
			{
				if ((this._GroupInSemestrID != value))
				{
					if (this._GroupInSemestr.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupInSemestrIDChanging(value);
					this.SendPropertyChanging();
					this._GroupInSemestrID = value;
					this.SendPropertyChanged("GroupInSemestrID");
					this.OnGroupInSemestrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseInWorkID", DbType="Int")]
		public System.Nullable<int> CourseInWorkID
		{
			get
			{
				return this._CourseInWorkID;
			}
			set
			{
				if ((this._CourseInWorkID != value))
				{
					if (this._CourseInWork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseInWorkIDChanging(value);
					this.SendPropertyChanging();
					this._CourseInWorkID = value;
					this.SendPropertyChanged("CourseInWorkID");
					this.OnCourseInWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInCourse_LoadInCourseFact", Storage="_LoadInCourseFact", ThisKey="Id", OtherKey="GroupInCourseID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this._LoadInCourseFact;
			}
			set
			{
				this._LoadInCourseFact.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_GroupInCourse", Storage="_CourseInWork", ThisKey="CourseInWorkID", OtherKey="ID", IsForeignKey=true)]
		public CourseInWork CourseInWork
		{
			get
			{
				return this._CourseInWork.Entity;
			}
			set
			{
				CourseInWork previousValue = this._CourseInWork.Entity;
				if (((previousValue != value) 
							|| (this._CourseInWork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInWork.Entity = null;
						previousValue.GroupInCourse.Remove(this);
					}
					this._CourseInWork.Entity = value;
					if ((value != null))
					{
						value.GroupInCourse.Add(this);
						this._CourseInWorkID = value.ID;
					}
					else
					{
						this._CourseInWorkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseInWork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInSemestr_GroupInCourse", Storage="_GroupInSemestr", ThisKey="GroupInSemestrID", OtherKey="ID", IsForeignKey=true)]
		public GroupInSemestr GroupInSemestr
		{
			get
			{
				return this._GroupInSemestr.Entity;
			}
			set
			{
				GroupInSemestr previousValue = this._GroupInSemestr.Entity;
				if (((previousValue != value) 
							|| (this._GroupInSemestr.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupInSemestr.Entity = null;
						previousValue.GroupInCourse.Remove(this);
					}
					this._GroupInSemestr.Entity = value;
					if ((value != null))
					{
						value.GroupInCourse.Add(this);
						this._GroupInSemestrID = value.ID;
					}
					else
					{
						this._GroupInSemestrID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupInSemestr");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.GroupInCourse = this;
		}
		
		private void detach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.GroupInCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupInSemestr")]
	public partial class GroupInSemestr : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GroupID;
		
		private System.Nullable<int> _SchoolYear;
		
		private System.Nullable<short> _Semestr;
		
		private System.Nullable<short> _QuantityCommercial;
		
		private System.Nullable<short> _QuantityBudget;
		
		private EntitySet<GroupInCourse> _GroupInCourse;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<SchoolYear> _SchoolYear1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnSchoolYearChanging(System.Nullable<int> value);
    partial void OnSchoolYearChanged();
    partial void OnSemestrChanging(System.Nullable<short> value);
    partial void OnSemestrChanged();
    partial void OnQuantityCommercialChanging(System.Nullable<short> value);
    partial void OnQuantityCommercialChanged();
    partial void OnQuantityBudgetChanging(System.Nullable<short> value);
    partial void OnQuantityBudgetChanged();
    #endregion
		
		public GroupInSemestr()
		{
			this._GroupInCourse = new EntitySet<GroupInCourse>(new Action<GroupInCourse>(this.attach_GroupInCourse), new Action<GroupInCourse>(this.detach_GroupInCourse));
			this._Group = default(EntityRef<Group>);
			this._SchoolYear1 = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYear", DbType="Int")]
		public System.Nullable<int> SchoolYear
		{
			get
			{
				return this._SchoolYear;
			}
			set
			{
				if ((this._SchoolYear != value))
				{
					if (this._SchoolYear1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearChanging(value);
					this.SendPropertyChanging();
					this._SchoolYear = value;
					this.SendPropertyChanged("SchoolYear");
					this.OnSchoolYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semestr", DbType="SmallInt")]
		public System.Nullable<short> Semestr
		{
			get
			{
				return this._Semestr;
			}
			set
			{
				if ((this._Semestr != value))
				{
					this.OnSemestrChanging(value);
					this.SendPropertyChanging();
					this._Semestr = value;
					this.SendPropertyChanged("Semestr");
					this.OnSemestrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityCommercial", DbType="SmallInt")]
		public System.Nullable<short> QuantityCommercial
		{
			get
			{
				return this._QuantityCommercial;
			}
			set
			{
				if ((this._QuantityCommercial != value))
				{
					this.OnQuantityCommercialChanging(value);
					this.SendPropertyChanging();
					this._QuantityCommercial = value;
					this.SendPropertyChanged("QuantityCommercial");
					this.OnQuantityCommercialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityBudget", DbType="SmallInt")]
		public System.Nullable<short> QuantityBudget
		{
			get
			{
				return this._QuantityBudget;
			}
			set
			{
				if ((this._QuantityBudget != value))
				{
					this.OnQuantityBudgetChanging(value);
					this.SendPropertyChanging();
					this._QuantityBudget = value;
					this.SendPropertyChanged("QuantityBudget");
					this.OnQuantityBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInSemestr_GroupInCourse", Storage="_GroupInCourse", ThisKey="ID", OtherKey="GroupInSemestrID")]
		public EntitySet<GroupInCourse> GroupInCourse
		{
			get
			{
				return this._GroupInCourse;
			}
			set
			{
				this._GroupInCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupInSemestr", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupInSemestr.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupInSemestr.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_GroupInSemestr", Storage="_SchoolYear1", ThisKey="SchoolYear", OtherKey="ID", IsForeignKey=true)]
		public SchoolYear SchoolYear1
		{
			get
			{
				return this._SchoolYear1.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear1.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear1.Entity = null;
						previousValue.GroupInSemestr.Remove(this);
					}
					this._SchoolYear1.Entity = value;
					if ((value != null))
					{
						value.GroupInSemestr.Add(this);
						this._SchoolYear = value.ID;
					}
					else
					{
						this._SchoolYear = default(Nullable<int>);
					}
					this.SendPropertyChanged("SchoolYear1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupInCourse(GroupInCourse entity)
		{
			this.SendPropertyChanging();
			entity.GroupInSemestr = this;
		}
		
		private void detach_GroupInCourse(GroupInCourse entity)
		{
			this.SendPropertyChanging();
			entity.GroupInSemestr = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoadInCourseFact")]
	public partial class LoadInCourseFact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _CountHours;
		
		private System.Nullable<bool> _PochFond;
		
		private System.Nullable<int> _LoadInCoursePlanID;
		
		private System.Nullable<int> _CourseInWorkID;
		
		private System.Nullable<int> _ClassRoomID;
		
		private System.Nullable<int> _EmployeeFormID;
		
		private System.Nullable<int> _EmployeeFactID;
		
		private System.Nullable<int> _GroupInCourseID;
		
		private EntityRef<ClassRoom> _ClassRoom;
		
		private EntityRef<CourseInWork> _CourseInWork;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<GroupInCourse> _GroupInCourse;
		
		private EntityRef<LoadInCoursePlan> _LoadInCoursePlan;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountHoursChanging(decimal value);
    partial void OnCountHoursChanged();
    partial void OnPochFondChanging(System.Nullable<bool> value);
    partial void OnPochFondChanged();
    partial void OnLoadInCoursePlanIDChanging(System.Nullable<int> value);
    partial void OnLoadInCoursePlanIDChanged();
    partial void OnCourseInWorkIDChanging(System.Nullable<int> value);
    partial void OnCourseInWorkIDChanged();
    partial void OnClassRoomIDChanging(System.Nullable<int> value);
    partial void OnClassRoomIDChanged();
    partial void OnEmployeeFormIDChanging(System.Nullable<int> value);
    partial void OnEmployeeFormIDChanged();
    partial void OnEmployeeFactIDChanging(System.Nullable<int> value);
    partial void OnEmployeeFactIDChanged();
    partial void OnGroupInCourseIDChanging(System.Nullable<int> value);
    partial void OnGroupInCourseIDChanged();
    #endregion
		
		public LoadInCourseFact()
		{
			this._ClassRoom = default(EntityRef<ClassRoom>);
			this._CourseInWork = default(EntityRef<CourseInWork>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._GroupInCourse = default(EntityRef<GroupInCourse>);
			this._LoadInCoursePlan = default(EntityRef<LoadInCoursePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountHours", DbType="Decimal(7,2) NOT NULL")]
		public decimal CountHours
		{
			get
			{
				return this._CountHours;
			}
			set
			{
				if ((this._CountHours != value))
				{
					this.OnCountHoursChanging(value);
					this.SendPropertyChanging();
					this._CountHours = value;
					this.SendPropertyChanged("CountHours");
					this.OnCountHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PochFond", DbType="Bit")]
		public System.Nullable<bool> PochFond
		{
			get
			{
				return this._PochFond;
			}
			set
			{
				if ((this._PochFond != value))
				{
					this.OnPochFondChanging(value);
					this.SendPropertyChanging();
					this._PochFond = value;
					this.SendPropertyChanged("PochFond");
					this.OnPochFondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadInCoursePlanID", DbType="Int")]
		public System.Nullable<int> LoadInCoursePlanID
		{
			get
			{
				return this._LoadInCoursePlanID;
			}
			set
			{
				if ((this._LoadInCoursePlanID != value))
				{
					if (this._LoadInCoursePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadInCoursePlanIDChanging(value);
					this.SendPropertyChanging();
					this._LoadInCoursePlanID = value;
					this.SendPropertyChanged("LoadInCoursePlanID");
					this.OnLoadInCoursePlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseInWorkID", DbType="Int")]
		public System.Nullable<int> CourseInWorkID
		{
			get
			{
				return this._CourseInWorkID;
			}
			set
			{
				if ((this._CourseInWorkID != value))
				{
					if (this._CourseInWork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseInWorkIDChanging(value);
					this.SendPropertyChanging();
					this._CourseInWorkID = value;
					this.SendPropertyChanged("CourseInWorkID");
					this.OnCourseInWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassRoomID", DbType="Int")]
		public System.Nullable<int> ClassRoomID
		{
			get
			{
				return this._ClassRoomID;
			}
			set
			{
				if ((this._ClassRoomID != value))
				{
					if (this._ClassRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ClassRoomID = value;
					this.SendPropertyChanged("ClassRoomID");
					this.OnClassRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeFormID", DbType="Int")]
		public System.Nullable<int> EmployeeFormID
		{
			get
			{
				return this._EmployeeFormID;
			}
			set
			{
				if ((this._EmployeeFormID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeFormIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFormID = value;
					this.SendPropertyChanged("EmployeeFormID");
					this.OnEmployeeFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeFactID", DbType="Int")]
		public System.Nullable<int> EmployeeFactID
		{
			get
			{
				return this._EmployeeFactID;
			}
			set
			{
				if ((this._EmployeeFactID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeFactIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFactID = value;
					this.SendPropertyChanged("EmployeeFactID");
					this.OnEmployeeFactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupInCourseID", DbType="Int")]
		public System.Nullable<int> GroupInCourseID
		{
			get
			{
				return this._GroupInCourseID;
			}
			set
			{
				if ((this._GroupInCourseID != value))
				{
					if (this._GroupInCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupInCourseIDChanging(value);
					this.SendPropertyChanging();
					this._GroupInCourseID = value;
					this.SendPropertyChanged("GroupInCourseID");
					this.OnGroupInCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassRoom_LoadInCourseFact", Storage="_ClassRoom", ThisKey="ClassRoomID", OtherKey="Id", IsForeignKey=true)]
		public ClassRoom ClassRoom
		{
			get
			{
				return this._ClassRoom.Entity;
			}
			set
			{
				ClassRoom previousValue = this._ClassRoom.Entity;
				if (((previousValue != value) 
							|| (this._ClassRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassRoom.Entity = null;
						previousValue.LoadInCourseFact.Remove(this);
					}
					this._ClassRoom.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact.Add(this);
						this._ClassRoomID = value.Id;
					}
					else
					{
						this._ClassRoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClassRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_LoadInCourseFact", Storage="_CourseInWork", ThisKey="CourseInWorkID", OtherKey="ID", IsForeignKey=true)]
		public CourseInWork CourseInWork
		{
			get
			{
				return this._CourseInWork.Entity;
			}
			set
			{
				CourseInWork previousValue = this._CourseInWork.Entity;
				if (((previousValue != value) 
							|| (this._CourseInWork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInWork.Entity = null;
						previousValue.LoadInCourseFact.Remove(this);
					}
					this._CourseInWork.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact.Add(this);
						this._CourseInWorkID = value.ID;
					}
					else
					{
						this._CourseInWorkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseInWork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoadInCourseFact", Storage="_Employee", ThisKey="EmployeeFormID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.LoadInCourseFact.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact.Add(this);
						this._EmployeeFormID = value.Id;
					}
					else
					{
						this._EmployeeFormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoadInCourseFact1", Storage="_Employee1", ThisKey="EmployeeFactID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.LoadInCourseFact1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact1.Add(this);
						this._EmployeeFactID = value.Id;
					}
					else
					{
						this._EmployeeFactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInCourse_LoadInCourseFact", Storage="_GroupInCourse", ThisKey="GroupInCourseID", OtherKey="Id", IsForeignKey=true)]
		public GroupInCourse GroupInCourse
		{
			get
			{
				return this._GroupInCourse.Entity;
			}
			set
			{
				GroupInCourse previousValue = this._GroupInCourse.Entity;
				if (((previousValue != value) 
							|| (this._GroupInCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupInCourse.Entity = null;
						previousValue.LoadInCourseFact.Remove(this);
					}
					this._GroupInCourse.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact.Add(this);
						this._GroupInCourseID = value.Id;
					}
					else
					{
						this._GroupInCourseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupInCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoadInCoursePlan_LoadInCourseFact", Storage="_LoadInCoursePlan", ThisKey="LoadInCoursePlanID", OtherKey="Id", IsForeignKey=true)]
		public LoadInCoursePlan LoadInCoursePlan
		{
			get
			{
				return this._LoadInCoursePlan.Entity;
			}
			set
			{
				LoadInCoursePlan previousValue = this._LoadInCoursePlan.Entity;
				if (((previousValue != value) 
							|| (this._LoadInCoursePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoadInCoursePlan.Entity = null;
						previousValue.LoadInCourseFact.Remove(this);
					}
					this._LoadInCoursePlan.Entity = value;
					if ((value != null))
					{
						value.LoadInCourseFact.Add(this);
						this._LoadInCoursePlanID = value.Id;
					}
					else
					{
						this._LoadInCoursePlanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoadInCoursePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoadInCoursePlan")]
	public partial class LoadInCoursePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _CountHours;
		
		private bool _ByGroups;
		
		private System.Nullable<int> _CourseInWorkID;
		
		private System.Nullable<int> _SortLoadID;
		
		private EntitySet<LoadInCourseFact> _LoadInCourseFact;
		
		private EntityRef<CourseInWork> _CourseInWork;
		
		private EntityRef<SortLoad> _SortLoad;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountHoursChanging(decimal value);
    partial void OnCountHoursChanged();
    partial void OnByGroupsChanging(bool value);
    partial void OnByGroupsChanged();
    partial void OnCourseInWorkIDChanging(System.Nullable<int> value);
    partial void OnCourseInWorkIDChanged();
    partial void OnSortLoadIDChanging(System.Nullable<int> value);
    partial void OnSortLoadIDChanged();
    #endregion
		
		public LoadInCoursePlan()
		{
			this._LoadInCourseFact = new EntitySet<LoadInCourseFact>(new Action<LoadInCourseFact>(this.attach_LoadInCourseFact), new Action<LoadInCourseFact>(this.detach_LoadInCourseFact));
			this._CourseInWork = default(EntityRef<CourseInWork>);
			this._SortLoad = default(EntityRef<SortLoad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountHours", DbType="Decimal(5,2) NOT NULL")]
		public decimal CountHours
		{
			get
			{
				return this._CountHours;
			}
			set
			{
				if ((this._CountHours != value))
				{
					this.OnCountHoursChanging(value);
					this.SendPropertyChanging();
					this._CountHours = value;
					this.SendPropertyChanged("CountHours");
					this.OnCountHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ByGroups", DbType="Bit NOT NULL")]
		public bool ByGroups
		{
			get
			{
				return this._ByGroups;
			}
			set
			{
				if ((this._ByGroups != value))
				{
					this.OnByGroupsChanging(value);
					this.SendPropertyChanging();
					this._ByGroups = value;
					this.SendPropertyChanged("ByGroups");
					this.OnByGroupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseInWorkID", DbType="Int")]
		public System.Nullable<int> CourseInWorkID
		{
			get
			{
				return this._CourseInWorkID;
			}
			set
			{
				if ((this._CourseInWorkID != value))
				{
					if (this._CourseInWork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseInWorkIDChanging(value);
					this.SendPropertyChanging();
					this._CourseInWorkID = value;
					this.SendPropertyChanged("CourseInWorkID");
					this.OnCourseInWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortLoadID", DbType="Int")]
		public System.Nullable<int> SortLoadID
		{
			get
			{
				return this._SortLoadID;
			}
			set
			{
				if ((this._SortLoadID != value))
				{
					if (this._SortLoad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortLoadIDChanging(value);
					this.SendPropertyChanging();
					this._SortLoadID = value;
					this.SendPropertyChanged("SortLoadID");
					this.OnSortLoadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoadInCoursePlan_LoadInCourseFact", Storage="_LoadInCourseFact", ThisKey="Id", OtherKey="LoadInCoursePlanID")]
		public EntitySet<LoadInCourseFact> LoadInCourseFact
		{
			get
			{
				return this._LoadInCourseFact;
			}
			set
			{
				this._LoadInCourseFact.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInWork_LoadInCoursePlan", Storage="_CourseInWork", ThisKey="CourseInWorkID", OtherKey="ID", IsForeignKey=true)]
		public CourseInWork CourseInWork
		{
			get
			{
				return this._CourseInWork.Entity;
			}
			set
			{
				CourseInWork previousValue = this._CourseInWork.Entity;
				if (((previousValue != value) 
							|| (this._CourseInWork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInWork.Entity = null;
						previousValue.LoadInCoursePlan.Remove(this);
					}
					this._CourseInWork.Entity = value;
					if ((value != null))
					{
						value.LoadInCoursePlan.Add(this);
						this._CourseInWorkID = value.ID;
					}
					else
					{
						this._CourseInWorkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseInWork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_LoadInCoursePlan", Storage="_SortLoad", ThisKey="SortLoadID", OtherKey="Id", IsForeignKey=true)]
		public SortLoad SortLoad
		{
			get
			{
				return this._SortLoad.Entity;
			}
			set
			{
				SortLoad previousValue = this._SortLoad.Entity;
				if (((previousValue != value) 
							|| (this._SortLoad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SortLoad.Entity = null;
						previousValue.LoadInCoursePlan.Remove(this);
					}
					this._SortLoad.Entity = value;
					if ((value != null))
					{
						value.LoadInCoursePlan.Add(this);
						this._SortLoadID = value.Id;
					}
					else
					{
						this._SortLoadID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SortLoad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.LoadInCoursePlan = this;
		}
		
		private void detach_LoadInCourseFact(LoadInCourseFact entity)
		{
			this.SendPropertyChanging();
			entity.LoadInCoursePlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntitySet<Employee> _Employee;
		
		private EntitySet<PostAcessDenied> _PostAcessDenied;
		
		private EntitySet<PostSalary> _PostSalary;
		
		private EntitySet<Rate> _Rate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Post()
		{
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			this._PostAcessDenied = new EntitySet<PostAcessDenied>(new Action<PostAcessDenied>(this.attach_PostAcessDenied), new Action<PostAcessDenied>(this.detach_PostAcessDenied));
			this._PostSalary = new EntitySet<PostSalary>(new Action<PostSalary>(this.attach_PostSalary), new Action<PostSalary>(this.detach_PostSalary));
			this._Rate = new EntitySet<Rate>(new Action<Rate>(this.attach_Rate), new Action<Rate>(this.detach_Rate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(10)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Employee", Storage="_Employee", ThisKey="Id", OtherKey="PostID")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostAcessDenied", Storage="_PostAcessDenied", ThisKey="Id", OtherKey="PostID")]
		public EntitySet<PostAcessDenied> PostAcessDenied
		{
			get
			{
				return this._PostAcessDenied;
			}
			set
			{
				this._PostAcessDenied.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostSalary", Storage="_PostSalary", ThisKey="Id", OtherKey="PostID")]
		public EntitySet<PostSalary> PostSalary
		{
			get
			{
				return this._PostSalary;
			}
			set
			{
				this._PostSalary.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Rate", Storage="_Rate", ThisKey="Id", OtherKey="PostID")]
		public EntitySet<Rate> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				this._Rate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_PostAcessDenied(PostAcessDenied entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_PostAcessDenied(PostAcessDenied entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_PostSalary(PostSalary entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_PostSalary(PostSalary entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostAcessDenied")]
	public partial class PostAcessDenied : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PostID;
		
		private System.Nullable<int> _SortLoadID;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<SortLoad> _SortLoad;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPostIDChanging(System.Nullable<int> value);
    partial void OnPostIDChanged();
    partial void OnSortLoadIDChanging(System.Nullable<int> value);
    partial void OnSortLoadIDChanged();
    #endregion
		
		public PostAcessDenied()
		{
			this._Post = default(EntityRef<Post>);
			this._SortLoad = default(EntityRef<SortLoad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Int")]
		public System.Nullable<int> PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortLoadID", DbType="Int")]
		public System.Nullable<int> SortLoadID
		{
			get
			{
				return this._SortLoadID;
			}
			set
			{
				if ((this._SortLoadID != value))
				{
					if (this._SortLoad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortLoadIDChanging(value);
					this.SendPropertyChanging();
					this._SortLoadID = value;
					this.SendPropertyChanged("SortLoadID");
					this.OnSortLoadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostAcessDenied", Storage="_Post", ThisKey="PostID", OtherKey="Id", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.PostAcessDenied.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.PostAcessDenied.Add(this);
						this._PostID = value.Id;
					}
					else
					{
						this._PostID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_PostAcessDenied", Storage="_SortLoad", ThisKey="SortLoadID", OtherKey="Id", IsForeignKey=true)]
		public SortLoad SortLoad
		{
			get
			{
				return this._SortLoad.Entity;
			}
			set
			{
				SortLoad previousValue = this._SortLoad.Entity;
				if (((previousValue != value) 
							|| (this._SortLoad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SortLoad.Entity = null;
						previousValue.PostAcessDenied.Remove(this);
					}
					this._SortLoad.Entity = value;
					if ((value != null))
					{
						value.PostAcessDenied.Add(this);
						this._SortLoadID = value.Id;
					}
					else
					{
						this._SortLoadID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SortLoad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostSalary")]
	public partial class PostSalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PostID;
		
		private System.Nullable<int> _RateInHours;
		
		private System.Nullable<decimal> _K;
		
		private int _SchoolYearID;
		
		private System.Nullable<decimal> _BaseSalary;
		
		private System.Nullable<decimal> _PostSalary1;
		
		private System.Nullable<decimal> _GradeSurcharge;
		
		private System.Nullable<decimal> _PostSurcharge;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPostIDChanging(int value);
    partial void OnPostIDChanged();
    partial void OnRateInHoursChanging(System.Nullable<int> value);
    partial void OnRateInHoursChanged();
    partial void OnKChanging(System.Nullable<decimal> value);
    partial void OnKChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnBaseSalaryChanging(System.Nullable<decimal> value);
    partial void OnBaseSalaryChanged();
    partial void OnPostSalary1Changing(System.Nullable<decimal> value);
    partial void OnPostSalary1Changed();
    partial void OnGradeSurchargeChanging(System.Nullable<decimal> value);
    partial void OnGradeSurchargeChanged();
    partial void OnPostSurchargeChanging(System.Nullable<decimal> value);
    partial void OnPostSurchargeChanged();
    #endregion
		
		public PostSalary()
		{
			this._Post = default(EntityRef<Post>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Int NOT NULL")]
		public int PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateInHours", DbType="Int")]
		public System.Nullable<int> RateInHours
		{
			get
			{
				return this._RateInHours;
			}
			set
			{
				if ((this._RateInHours != value))
				{
					this.OnRateInHoursChanging(value);
					this.SendPropertyChanging();
					this._RateInHours = value;
					this.SendPropertyChanged("RateInHours");
					this.OnRateInHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_K", DbType="Decimal(8,7)")]
		public System.Nullable<decimal> K
		{
			get
			{
				return this._K;
			}
			set
			{
				if ((this._K != value))
				{
					this.OnKChanging(value);
					this.SendPropertyChanging();
					this._K = value;
					this.SendPropertyChanged("K");
					this.OnKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
		public int SchoolYearID
		{
			get
			{
				return this._SchoolYearID;
			}
			set
			{
				if ((this._SchoolYearID != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearID = value;
					this.SendPropertyChanged("SchoolYearID");
					this.OnSchoolYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseSalary", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> BaseSalary
		{
			get
			{
				return this._BaseSalary;
			}
			set
			{
				if ((this._BaseSalary != value))
				{
					this.OnBaseSalaryChanging(value);
					this.SendPropertyChanging();
					this._BaseSalary = value;
					this.SendPropertyChanged("BaseSalary");
					this.OnBaseSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PostSalary", Storage="_PostSalary1", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PostSalary1
		{
			get
			{
				return this._PostSalary1;
			}
			set
			{
				if ((this._PostSalary1 != value))
				{
					this.OnPostSalary1Changing(value);
					this.SendPropertyChanging();
					this._PostSalary1 = value;
					this.SendPropertyChanged("PostSalary1");
					this.OnPostSalary1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeSurcharge", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> GradeSurcharge
		{
			get
			{
				return this._GradeSurcharge;
			}
			set
			{
				if ((this._GradeSurcharge != value))
				{
					this.OnGradeSurchargeChanging(value);
					this.SendPropertyChanging();
					this._GradeSurcharge = value;
					this.SendPropertyChanged("GradeSurcharge");
					this.OnGradeSurchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostSurcharge", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PostSurcharge
		{
			get
			{
				return this._PostSurcharge;
			}
			set
			{
				if ((this._PostSurcharge != value))
				{
					this.OnPostSurchargeChanging(value);
					this.SendPropertyChanging();
					this._PostSurcharge = value;
					this.SendPropertyChanged("PostSurcharge");
					this.OnPostSurchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostSalary", Storage="_Post", ThisKey="PostID", OtherKey="Id", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.PostSalary.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.PostSalary.Add(this);
						this._PostID = value.Id;
					}
					else
					{
						this._PostID = default(int);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_PostSalary", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="ID", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.PostSalary.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.PostSalary.Add(this);
						this._SchoolYearID = value.ID;
					}
					else
					{
						this._SchoolYearID = default(int);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rate")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _EmployeeID;
		
		private int _SchoolYearID;
		
		private System.Nullable<decimal> _Rate1;
		
		private int _ID;
		
		private System.Nullable<int> _PostID;
		
		private System.Nullable<bool> _IsTradeUnionMember;
		
		private int _PochFondLimit;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnRate1Changing(System.Nullable<decimal> value);
    partial void OnRate1Changed();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPostIDChanging(System.Nullable<int> value);
    partial void OnPostIDChanged();
    partial void OnIsTradeUnionMemberChanging(System.Nullable<bool> value);
    partial void OnIsTradeUnionMemberChanged();
    partial void OnPochFondLimitChanging(int value);
    partial void OnPochFondLimitChanged();
    #endregion
		
		public Rate()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Post = default(EntityRef<Post>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
		public int SchoolYearID
		{
			get
			{
				return this._SchoolYearID;
			}
			set
			{
				if ((this._SchoolYearID != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearID = value;
					this.SendPropertyChanged("SchoolYearID");
					this.OnSchoolYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Rate", Storage="_Rate1", DbType="Decimal(4,3)")]
		public System.Nullable<decimal> Rate1
		{
			get
			{
				return this._Rate1;
			}
			set
			{
				if ((this._Rate1 != value))
				{
					this.OnRate1Changing(value);
					this.SendPropertyChanging();
					this._Rate1 = value;
					this.SendPropertyChanged("Rate1");
					this.OnRate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Int")]
		public System.Nullable<int> PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTradeUnionMember", DbType="Bit")]
		public System.Nullable<bool> IsTradeUnionMember
		{
			get
			{
				return this._IsTradeUnionMember;
			}
			set
			{
				if ((this._IsTradeUnionMember != value))
				{
					this.OnIsTradeUnionMemberChanging(value);
					this.SendPropertyChanging();
					this._IsTradeUnionMember = value;
					this.SendPropertyChanged("IsTradeUnionMember");
					this.OnIsTradeUnionMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PochFondLimit", DbType="Int NOT NULL")]
		public int PochFondLimit
		{
			get
			{
				return this._PochFondLimit;
			}
			set
			{
				if ((this._PochFondLimit != value))
				{
					this.OnPochFondLimitChanging(value);
					this.SendPropertyChanging();
					this._PochFondLimit = value;
					this.SendPropertyChanged("PochFondLimit");
					this.OnPochFondLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rate", Storage="_Employee", ThisKey="EmployeeID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Rate.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Rate.Add(this);
						this._EmployeeID = value.Id;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Rate", Storage="_Post", ThisKey="PostID", OtherKey="Id", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Rate.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Rate.Add(this);
						this._PostID = value.Id;
					}
					else
					{
						this._PostID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Rate", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="ID", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.Rate.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.Rate.Add(this);
						this._SchoolYearID = value.ID;
					}
					else
					{
						this._SchoolYearID = default(int);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolYear")]
	public partial class SchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Years;
		
		private EntitySet<CourseInWork> _CourseInWork;
		
		private EntitySet<GroupInSemestr> _GroupInSemestr;
		
		private EntitySet<PostSalary> _PostSalary;
		
		private EntitySet<Rate> _Rate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearsChanging(string value);
    partial void OnYearsChanged();
    #endregion
		
		public SchoolYear()
		{
			this._CourseInWork = new EntitySet<CourseInWork>(new Action<CourseInWork>(this.attach_CourseInWork), new Action<CourseInWork>(this.detach_CourseInWork));
			this._GroupInSemestr = new EntitySet<GroupInSemestr>(new Action<GroupInSemestr>(this.attach_GroupInSemestr), new Action<GroupInSemestr>(this.detach_GroupInSemestr));
			this._PostSalary = new EntitySet<PostSalary>(new Action<PostSalary>(this.attach_PostSalary), new Action<PostSalary>(this.detach_PostSalary));
			this._Rate = new EntitySet<Rate>(new Action<Rate>(this.attach_Rate), new Action<Rate>(this.detach_Rate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Years", DbType="NVarChar(9)")]
		public string Years
		{
			get
			{
				return this._Years;
			}
			set
			{
				if ((this._Years != value))
				{
					this.OnYearsChanging(value);
					this.SendPropertyChanging();
					this._Years = value;
					this.SendPropertyChanged("Years");
					this.OnYearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_CourseInWork", Storage="_CourseInWork", ThisKey="ID", OtherKey="SchoolYearID")]
		public EntitySet<CourseInWork> CourseInWork
		{
			get
			{
				return this._CourseInWork;
			}
			set
			{
				this._CourseInWork.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_GroupInSemestr", Storage="_GroupInSemestr", ThisKey="ID", OtherKey="SchoolYear")]
		public EntitySet<GroupInSemestr> GroupInSemestr
		{
			get
			{
				return this._GroupInSemestr;
			}
			set
			{
				this._GroupInSemestr.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_PostSalary", Storage="_PostSalary", ThisKey="ID", OtherKey="SchoolYearID")]
		public EntitySet<PostSalary> PostSalary
		{
			get
			{
				return this._PostSalary;
			}
			set
			{
				this._PostSalary.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Rate", Storage="_Rate", ThisKey="ID", OtherKey="SchoolYearID")]
		public EntitySet<Rate> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				this._Rate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_CourseInWork(CourseInWork entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_GroupInSemestr(GroupInSemestr entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear1 = this;
		}
		
		private void detach_GroupInSemestr(GroupInSemestr entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear1 = null;
		}
		
		private void attach_PostSalary(PostSalary entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_PostSalary(PostSalary entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_Rate(Rate entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SortLoad")]
	public partial class SortLoad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsClass;
		
		private bool _IsBisection;
		
		private bool _IsOwner;
		
		private bool _IsDivideGroups;
		
		private System.Nullable<int> _IndexRecalc;
		
		private EntitySet<LoadInCoursePlan> _LoadInCoursePlan;
		
		private EntitySet<PostAcessDenied> _PostAcessDenied;
		
		private EntitySet<SortLoadInCourseType> _SortLoadInCourseType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsClassChanging(bool value);
    partial void OnIsClassChanged();
    partial void OnIsBisectionChanging(bool value);
    partial void OnIsBisectionChanged();
    partial void OnIsOwnerChanging(bool value);
    partial void OnIsOwnerChanged();
    partial void OnIsDivideGroupsChanging(bool value);
    partial void OnIsDivideGroupsChanged();
    partial void OnIndexRecalcChanging(System.Nullable<int> value);
    partial void OnIndexRecalcChanged();
    #endregion
		
		public SortLoad()
		{
			this._LoadInCoursePlan = new EntitySet<LoadInCoursePlan>(new Action<LoadInCoursePlan>(this.attach_LoadInCoursePlan), new Action<LoadInCoursePlan>(this.detach_LoadInCoursePlan));
			this._PostAcessDenied = new EntitySet<PostAcessDenied>(new Action<PostAcessDenied>(this.attach_PostAcessDenied), new Action<PostAcessDenied>(this.detach_PostAcessDenied));
			this._SortLoadInCourseType = new EntitySet<SortLoadInCourseType>(new Action<SortLoadInCourseType>(this.attach_SortLoadInCourseType), new Action<SortLoadInCourseType>(this.detach_SortLoadInCourseType));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClass", DbType="Bit NOT NULL")]
		public bool IsClass
		{
			get
			{
				return this._IsClass;
			}
			set
			{
				if ((this._IsClass != value))
				{
					this.OnIsClassChanging(value);
					this.SendPropertyChanging();
					this._IsClass = value;
					this.SendPropertyChanged("IsClass");
					this.OnIsClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBisection", DbType="Bit NOT NULL")]
		public bool IsBisection
		{
			get
			{
				return this._IsBisection;
			}
			set
			{
				if ((this._IsBisection != value))
				{
					this.OnIsBisectionChanging(value);
					this.SendPropertyChanging();
					this._IsBisection = value;
					this.SendPropertyChanged("IsBisection");
					this.OnIsBisectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwner", DbType="Bit NOT NULL")]
		public bool IsOwner
		{
			get
			{
				return this._IsOwner;
			}
			set
			{
				if ((this._IsOwner != value))
				{
					this.OnIsOwnerChanging(value);
					this.SendPropertyChanging();
					this._IsOwner = value;
					this.SendPropertyChanged("IsOwner");
					this.OnIsOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDivideGroups", DbType="Bit NOT NULL")]
		public bool IsDivideGroups
		{
			get
			{
				return this._IsDivideGroups;
			}
			set
			{
				if ((this._IsDivideGroups != value))
				{
					this.OnIsDivideGroupsChanging(value);
					this.SendPropertyChanging();
					this._IsDivideGroups = value;
					this.SendPropertyChanged("IsDivideGroups");
					this.OnIsDivideGroupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexRecalc", DbType="Int")]
		public System.Nullable<int> IndexRecalc
		{
			get
			{
				return this._IndexRecalc;
			}
			set
			{
				if ((this._IndexRecalc != value))
				{
					this.OnIndexRecalcChanging(value);
					this.SendPropertyChanging();
					this._IndexRecalc = value;
					this.SendPropertyChanged("IndexRecalc");
					this.OnIndexRecalcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_LoadInCoursePlan", Storage="_LoadInCoursePlan", ThisKey="Id", OtherKey="SortLoadID")]
		public EntitySet<LoadInCoursePlan> LoadInCoursePlan
		{
			get
			{
				return this._LoadInCoursePlan;
			}
			set
			{
				this._LoadInCoursePlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_PostAcessDenied", Storage="_PostAcessDenied", ThisKey="Id", OtherKey="SortLoadID")]
		public EntitySet<PostAcessDenied> PostAcessDenied
		{
			get
			{
				return this._PostAcessDenied;
			}
			set
			{
				this._PostAcessDenied.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_SortLoadInCourseType", Storage="_SortLoadInCourseType", ThisKey="Id", OtherKey="SortLoadID")]
		public EntitySet<SortLoadInCourseType> SortLoadInCourseType
		{
			get
			{
				return this._SortLoadInCourseType;
			}
			set
			{
				this._SortLoadInCourseType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoadInCoursePlan(LoadInCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = this;
		}
		
		private void detach_LoadInCoursePlan(LoadInCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = null;
		}
		
		private void attach_PostAcessDenied(PostAcessDenied entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = this;
		}
		
		private void detach_PostAcessDenied(PostAcessDenied entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = null;
		}
		
		private void attach_SortLoadInCourseType(SortLoadInCourseType entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = this;
		}
		
		private void detach_SortLoadInCourseType(SortLoadInCourseType entity)
		{
			this.SendPropertyChanging();
			entity.SortLoad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SortLoadInCourseType")]
	public partial class SortLoadInCourseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CourseTypeID;
		
		private System.Nullable<int> _SortLoadID;
		
		private EntityRef<CourseType> _CourseType;
		
		private EntityRef<SortLoad> _SortLoad;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseTypeIDChanging(System.Nullable<int> value);
    partial void OnCourseTypeIDChanged();
    partial void OnSortLoadIDChanging(System.Nullable<int> value);
    partial void OnSortLoadIDChanged();
    #endregion
		
		public SortLoadInCourseType()
		{
			this._CourseType = default(EntityRef<CourseType>);
			this._SortLoad = default(EntityRef<SortLoad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTypeID", DbType="Int")]
		public System.Nullable<int> CourseTypeID
		{
			get
			{
				return this._CourseTypeID;
			}
			set
			{
				if ((this._CourseTypeID != value))
				{
					if (this._CourseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTypeID = value;
					this.SendPropertyChanged("CourseTypeID");
					this.OnCourseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortLoadID", DbType="Int")]
		public System.Nullable<int> SortLoadID
		{
			get
			{
				return this._SortLoadID;
			}
			set
			{
				if ((this._SortLoadID != value))
				{
					if (this._SortLoad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortLoadIDChanging(value);
					this.SendPropertyChanging();
					this._SortLoadID = value;
					this.SendPropertyChanged("SortLoadID");
					this.OnSortLoadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_SortLoadInCourseType", Storage="_CourseType", ThisKey="CourseTypeID", OtherKey="Id", IsForeignKey=true)]
		public CourseType CourseType
		{
			get
			{
				return this._CourseType.Entity;
			}
			set
			{
				CourseType previousValue = this._CourseType.Entity;
				if (((previousValue != value) 
							|| (this._CourseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseType.Entity = null;
						previousValue.SortLoadInCourseType.Remove(this);
					}
					this._CourseType.Entity = value;
					if ((value != null))
					{
						value.SortLoadInCourseType.Add(this);
						this._CourseTypeID = value.Id;
					}
					else
					{
						this._CourseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SortLoad_SortLoadInCourseType", Storage="_SortLoad", ThisKey="SortLoadID", OtherKey="Id", IsForeignKey=true)]
		public SortLoad SortLoad
		{
			get
			{
				return this._SortLoad.Entity;
			}
			set
			{
				SortLoad previousValue = this._SortLoad.Entity;
				if (((previousValue != value) 
							|| (this._SortLoad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SortLoad.Entity = null;
						previousValue.SortLoadInCourseType.Remove(this);
					}
					this._SortLoad.Entity = value;
					if ((value != null))
					{
						value.SortLoadInCourseType.Add(this);
						this._SortLoadID = value.Id;
					}
					else
					{
						this._SortLoadID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SortLoad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
